package test

/**
 * @author Yura Zhloba <yzh44yzh@gmail.com>
 */

import com.yzh44yzh.scalaAmf._
import org.scalatest.FunSuite
import java.util.Date

class TestAmfObj extends FunSuite
{
    // anonymous object
    def createObj1() : AmfClass = {
        val obj = new AmfClass
        obj.put("name", "Bob")
        obj.put("gender", 1)
        obj.put("age", 25)
        obj
    }
    val obj1 = createObj1
    val buf1 = BufUtils.mkb(List(0x0a, 0x0b, // Object
			0x01,
			0x09, 0x6e, 0x61, 0x6d, 0x65, // name
			0x06, 0x07, 0x42, 0x6f, 0x62, // Bob
			0x0d, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, // gender
			0x04, 0x01, // 1
			0x07, 0x61, 0x67, 0x65, // age
			0x04, 0x19, // 25
			0x01))


    // anonymous object with inner anonymous object
    def createObj2() : AmfClass = {
        val location = new AmfClass
        location.put("country", "Belarus")
        location.put("city", "Minsk")

        val obj = new AmfClass
        obj.put("location", location)
        obj.put("name", "Yura")
        obj
    }
    val obj2 = createObj2
    val buf2 = BufUtils.mkb(List(0x0a, 0x0b, // Object
			0x01,
			0x11, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, // location
			0x0a, 0x0b, // inner Object
                0x01,
                0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, // country
                0x06, 0x0f, 0x42, 0x65, 0x6c, 0x61, 0x72, 0x75, 0x73, // Belarus
                0x09, 0x63, 0x69, 0x74, 0x79, // city
                0x06, 0x0b, 0x4d, 0x69, 0x6e, 0x73, 0x6b, // Minsk
                0x01, // end of inner Object
			0x09, 0x6e, 0x61, 0x6d, 0x65, // name
			0x06, 0x09, 0x59, 0x75, 0x72, 0x61, // Yura
			0x01))

    
    // AS3 class (not registered)
    def createObj3() : AmfClass = {
        val obj = new AmfClass
        obj.put("id", 25)
        obj.put("date", new Date(1289767440000L))
        obj.put("sender", "Bob")
        obj.put("content", "Hello")
        obj
    }
    val obj3 = createObj3
    val buf3 = BufUtils.mkb(List(0xa, 0x43,
            0x1, // empty class name
            0x5, 0x69, 0x64, // id
            0x9, 0x64, 0x61, 0x74, 0x65, // date
            0xd, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, // sender
            0xf, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, // content
            0x4, 0x19, // 25
            0x08, 0x01, 0x42, 0x72, -0x3c, -0x3e, 0x14, -0x18, 0x00, 0x0, // Sun Nov 14 22:44:00 GMT+0200 2010
            0x6, 0x7, 0x42, 0x6f, 0x62, // Bob
            0x6, 0xb, 0x48, 0x65, 0x6c, 0x6c, 0x6f // Hello
     ))
    val buf3enc = BufUtils.mkb(List(0xa, 0xb,
            0x1, 
            0x5, 0x69, 0x64, // id
            0x4, 0x19, // 25
            0x9, 0x64, 0x61, 0x74, 0x65, // date
            0x08, 0x01, 0x42, 0x72, -0x3c, -0x3e, 0x14, -0x18, 0x00, 0x0, // Sun Nov 14 22:44:00 GMT+0200 2010
            0xd, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, // sender
            0x6, 0x7, 0x42, 0x6f, 0x62, // Bob
            0xf, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, // content
            0x6, 0xb, 0x48, 0x65, 0x6c, 0x6c, 0x6f, // Hello
            0x1
     ))


    // AS3 class (registered)
    def createObj4() : AmfClass = {
        val obj = new AmfClass
        obj.className = "some.pack.Message"
        obj.put("isPrivate", true)
        obj.put("id", 25)
        obj.put("content", "Hello")
        obj.put("sender", "Bob")
        obj
    }
    val obj4 = createObj4
    val buf4 = BufUtils.mkb(List(0xa, 0x43,
            0x23, // className string length
            0x73, 0x6f, 0x6d, 0x65, 0x2e, // some.
            0x70, 0x61, 0x63, 0x6b, 0x2e, // pack.
            0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, // Message
            0x13, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, // isPrivate
            0x5, 0x69, 0x64, // id
            0xf, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, // content
            0xd, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, // sender
            0x3, // true
            0x4, 0x19, // 25
            0x6, 0xb, 0x48, 0x65, 0x6c, 0x6c, 0x6f, // Hello
            0x6, 0x7, 0x42, 0x6f, 0x62 // Bob
    ))


    test("decode objects")
    {
        val (AmfType.OBJECT, res1) = Amf.decode(buf1)
        assert(obj1.equals(res1))

        val (AmfType.OBJECT, res2) = Amf.decode(buf2)
        assert(obj2.equals(res2))

        val (AmfType.OBJECT, res3) = Amf.decode(buf3)
        assert(obj3.equals(res3))

        val (AmfType.OBJECT, res4) = Amf.decode(buf4)
        assert(obj4.equals(res4))
        assert(res4.asInstanceOf[AmfClass].className.equals("some.pack.Message"))
    }
    
    test("encode objects")
    {
        assert(BufUtils.eq(Amf.encode((AmfType.OBJECT, obj1)), buf1))
        assert(BufUtils.eq(Amf.encode((AmfType.OBJECT, obj2)), buf2))
        assert(BufUtils.eq(Amf.encode((AmfType.OBJECT, obj3)), buf3enc))
        assert(BufUtils.eq(Amf.encode((AmfType.OBJECT, obj4)), buf4))
    }
}
